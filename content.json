{"meta":{"title":"HOLY","subtitle":"holy","description":null,"author":"e3gs","url":"https://e3gs.github.io"},"pages":[],"posts":[{"title":"Spring Boot基础知识","slug":"Spring-Boot基础知识","date":"2018-07-09T06:29:27.000Z","updated":"2018-07-18T03:21:01.217Z","comments":true,"path":"2018/07/09/Spring-Boot基础知识/","link":"","permalink":"https://e3gs.github.io/2018/07/09/Spring-Boot基础知识/","excerpt":"","text":"Spring框架的本质Spring IoC（Inversion Of Control）IoC有两种形式，DI（Dependency Injection）和DL(Dependency Lookup) Spring IoC指的是Spring框架提供的IoC容器实现（IoC Container） 常用的类似context.getBean(...)，做的就是DL的工作。 Spring IoC容器的DI工作可以分为两个阶段： 收集和注册：通过XML或Java代码方式定义一些bean，通过手动组装或让容器基于某些机制自动扫描将这些bean收集到IoC容器中 分析和组装：当第一步完成，可以认为IoC容器中充斥着一个个独立的bean， JavaConfig基于JavaConfig方式的依赖关系绑定描述基本上映射了早期基于XML的配置方式。 任何标注了@Configuration的Java类定义都是一个JavaConfig配置类。 任何标注了@Bean的方法，其返回值将作为一个bean定义注册到IoC容器，方法名将默认成为该bean定义的id。 其他Annotation @ComponentScan:对应XML中的context:compoment-scan元素，用于配合一些元信息Java Annotation。 @PropertyScource和@PropertyScources。用于加载*.properties文件内容。 @Import和@ImportResource,用于将多个分开的容器配置合到一个配置中 SpringBoot工作机制SpringBoot 是Spring框架对“约定优于配置（Convention Over Configuration）”理念的最佳实践的产物。一个SpringBoot应用就是一个基于Spring框架的应用。 初体验一个SpringBoot启动类代码如下：12345678910import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class Starter &#123; public static void main(String[] args) &#123; SpringApplication.run(Starter.class, args); &#125;&#125; 下面分析其中@SpringBootApplication和SpringApplication.run @SpringBootApplication@SpringBootApplication实际是一个复合Annotation，其中重要的只有三个：123@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan @SpringBootConfiguration启动类标注了@Configuration，所以其也是一个IoC容器配置类。 @EnableAutoConfigurationSpring 中@Enable开头的Annotation的定义？借助@Import的支持收集和注册特定场景相关的bean定义。 其是借助@Import的帮助将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！ 借助Spring原有的一个工具类：SpringFactoriesLoader的支持， @EnableAutoConfiguration才得以实现自动装配。 SpringFactoriesLoader详解是属于Spring框架私有的一种扩展方案（类似Java的SPI），主要功能是从指定配置文件META-INF/spring.factories 加载配置。 SpringApplication其run()方法流程大体如下： 静态run方法；在SpringApplication初始化时 根据classpath是否存在某个特征类（ConfigurableWebApplicationContext）决定应该创建一个为Web应用使用的ApplicationContext类型，还是创建一个标准Standalone应用使用的ApplicationContext类型 使用SpringFactoriesLoader在应用的classpath中查找并加载可用ApplicationContextInitiaizer 及 ApplicationListener。 推断并设置main方法的定义类 执行run方法逻辑。首先便利通过SpringFactoriesLoader加载的SpringApplicationRunListener，调用它们的started(); 创建并配置当前SpringBoot将使用的Environment（PropertySource 及 Profile） 遍历SpringApplicationRunListener的environmentPrepared()方法，通知当前SpringBoot应用使用的Environment准备好了。 如果SpringApplication的showBanner属性为true，则打印banner。Just for fun 根据是否明确设置了applicationContextClass类型，决定创建什么类型的ApplicationContext，决定是否添加shutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader。并将之前的Environment设置给创建好的ApplicationContext使用。 ApplicationContext创建好后，查找可用ApplicationContextInitializer，遍历并调用其initialize()方法进一步处理 遍历SpringApplicationRunListener的contextPrepared()方法，通知当前SpringBoot应用使用的ApplicationContext准备好了。 核心一步：将之前@EnableAutoConfiguration获取的所有配置加载到ApplicationContext 遍历SpringApplicationRunListener的contextLoaded()方法，通知ApplicationContext装填完成。 调用ApplicationContext到refresh()方法。IoC容器可用 查找是否注册有CommandLineRunner，有则遍历 遍历SpringApplicationRunListener的finished()方法 启动完毕。可见大量工作是通过扩展点完成的。 SpringApplicationRunListener是main方执行过程中执行事件通知的监听者。 自动配置基于@EnableAutoConfiguration的自动配置通过配合比如基于条件的配置或调整加载顺序，可以对自动配置进行更加细粒度的调整控制。 基于条件的自动配置基于Spring框架“基于条件的配置”这一特性。我们可以使用@Conditional配合@Configuration或@Bean来干预一个配置或bean定义是否生效 只要通过@Conditional指向自己的Condition实现类就可以了 @Conditional可以作为一个Meta Annotation来标注其他Annotation实现类，从而构建特色的复合Annotation。SpringBoot 的autoconfigure模块就基于这一特性，实现了一批Annotation：@ConditionalOnClass，@ConditionalOnBean … SpringBoot提供的一系列自动配置的依赖模块，就是基于@Conditional复合Annotation实现的。 自动配置的顺序@AutoConfigureBefore，@AutoConfigureAfter","categories":[],"tags":[]},{"title":"boot之一：静态页面配置及打包","slug":"boot之一：静态页面配置及打包","date":"2018-06-25T08:20:38.000Z","updated":"2018-06-25T08:32:13.449Z","comments":true,"path":"2018/06/25/boot之一：静态页面配置及打包/","link":"","permalink":"https://e3gs.github.io/2018/06/25/boot之一：静态页面配置及打包/","excerpt":"","text":"Spirng boot 经常只用来部署服务，最近需要在项目中添加静态H5页面，发现并没有那么顺利，所以整理一下","categories":[],"tags":[]},{"title":"hexo博客搭建及更新操作步骤","slug":"hexo博客搭建及更新操作步骤","date":"2018-06-11T03:18:33.000Z","updated":"2018-06-13T11:09:19.929Z","comments":true,"path":"2018/06/11/hexo博客搭建及更新操作步骤/","link":"","permalink":"https://e3gs.github.io/2018/06/11/hexo博客搭建及更新操作步骤/","excerpt":"","text":"以下环境为Mac，默认已具备安装环境Node、Git 配置Hexo安装Hexonpm install hexo-cli -g npm install hexo --save 运行以下显示对应版本说明安装成功 hexo -v 初始化Hexohexo init npm install 运行hexo g hexo s INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 打开http://localhost:4000/ 即可看到效果 设置主题 在这里选择自己喜欢的主题 在_config.yml中修改theme为对应的主题即可theme: icarus 然后执行hexo clea，hexo g 关于_config.yml中更多设置可以参考config 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: 海之声 #主页标题subtitle: 参差多态乃是幸福本源 #副标题description: 参差多态乃是幸福本源 # 网站描述，可以加一句自己喜欢的座右铭author: haiyusun #作者，左下角显示avatar: /images/avatar.jpg #设置头像，放在\\themes\\next\\source\\images里language: zh-Hans # 选择中文简体timezone:since: 2016 #建站日期，左下角显示# 多说 ShortNameduoshuo_shortname: your_username # 多说评论，后面填写用户名# 百度分析baidu_analytics: your_id # 填写自己获得的id# Social linkssocial: Github: https://github.com/haiyusun Email: mailto:haiyu19931121@163.com# title, chinese availablelinks_title: 友情链接# linkslinks: 我的简书: http://www.jianshu.com/users/4943cb2c6ea4# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://haiyusun.github.io/ #填自己的github pages网址root: /permalink: :year/:month/:day/:title/permalink_defaults:# 本地搜索search: path: search.xml field: post# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: true# 语法高亮highlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# 百度网站地图plugins:baidusitemap: # 需要安装插件 npm install hexo-generator-baidu-sitemap@0.1.1 --save path: baidusitemap.xml# 主题切换theme: next# RSS订阅feed: type: atom path: atom.xml limit: 0# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:your-username/haiyusun.github.io.git branch: master# ---------------下面选项需要对应插件的支持---------------# npm install hexo-generator-index --save# npm install hexo-generator-archive --save# npm install hexo-generator-category --save# npm install hexo-generator-tag --saveindex_generator: per_page: 10 ##首页默认10篇文章标题 如果值为0不分页archive_generator: per_page: 20 ##归档页面默认20篇文章标题 yearly: true ##生成年视图 monthly: true ##生成月视图tag_generator: per_page: 10 ##标签分类页面默认10篇文章category_generator: per_page: 10 ###分类页面默认10篇文章 常用命令hexo n # 新建文章，在\\source\\_posts文件夹里 hexo new page # 新建页面，比如想在导航栏新增一个“关于我”的页面 hexo clean # 清除本地的数据库和生成的public文件夹 hexo g # 生成博客文件 hexo s # 运行在本地浏览器，可当预览使用 hexo d # 部署博客到Github等 键入hexo n “name”即可在\\source_posts文件夹里生成name.md的Markdown文件，结构如下 --- title: HelloWorld！ # 文章页面上的显示名称，可以任意修改，不会出现在URL中 date: 2015-11-09 15:56:26 # 文章生成时间，一般不改 categories: # 文章分类目录，参数可省略 - 随笔 # 此为一级目录 - 瞬间 # 此为二级目录 - 关于 # 此为三级目录 tags: # 文章标签，参数可省略 - hexo - blog # 个数不限，单个可直接跟在tags后面 --- 这里开始是正文 如果想生成的文件默认带categories，那么打开根目录下\\scaffolds\\post.md新增一行categories :就修改好了模板文件。如果想在主页中以摘要形式显示你的文章，要么正文中加入即可屏蔽该语句下面的内容。 使用详情参考这里 部署到Github Pages 修改_config.yml配置 deploy: type: git # 填上你自己的仓库名，注意后面有`.git` repository: git@github.com:your_username/your_username.github.io.git branch: master 安装插件 npm install hexo-deployer-git --save 发布 hexo clean hexo g hexo d","categories":[],"tags":[]},{"title":"mac下多git账号设置","slug":"mac下多git账号设置","date":"2018-06-08T09:29:20.000Z","updated":"2018-07-16T07:12:16.971Z","comments":true,"path":"2018/06/08/mac下多git账号设置/","link":"","permalink":"https://e3gs.github.io/2018/06/08/mac下多git账号设置/","excerpt":"","text":"清除git的全局设置$ git config --global --unset user.name &quot;your_email_prefix&quot; $ git config --global --unset user.email &quot;your_email&quot; 创建 SSH密钥$ ssh-keygen -t rsa -C &quot;your_email&quot; 可生成任意多个密钥 your_email为git账号注册邮箱 配置~/.ssh/config文件#gitlab Host gitlab HostName git.XXXX.com IdentityFile ~/.ssh/gitlab_id_rsa #github Host github HostName github.com IdentityFile ~/.ssh/github_id_rsa 验证连接Git连接git命令： $ ssh -T git@github.com Hi e3gs! You&apos;ve successfully authenticated, but GitHub does not provide shell access. $ ssh -T git@git.XXXX.com Welcome to GitLab, xxxx! 则说明连接成功 添加公钥到Git账号的SSH设置中复制公钥： $ pbcopy &lt; ~/.ssh/*_id_rsa.pub 添加SSH Key到Git账户设置中 设置目录对于github账号，如果所有工程都放在一个目录中，比如文件夹名为~/Github则可以如下： cd ~/Github git init&lt;!--可能不必要--&gt; git config --local user.name youname git config --local user.email youemail@XXX.com ssh-agent -s ssh-add ~/.ssh/github_id_rsa 在输入 ssh -T git@github.com 应该能收到欢迎语，就ok了 这样针对文件夹的git账号可以随意设置 设置全局如果是办公电脑，有在公司的常用账号的话可以在最外层设置 git config --global user.name youname git config --global user.email youemail@XXX.com ssh-agent -s ssh-add ~/.ssh/gitlab_id_rsa 然后出了设置了local的文件夹就都是gitlab账号了 git配置的三个级别git config —system git config —global git config —local local 对当前仓库的,从优先来说，local最高,其次是global ,由于他针对是当前的用户，最后是system 补充（20180716）最近git账号突然不好使了，排查了下原因。原来ssh-add命令只是把专用密钥添加到ssh-agent的高速缓存中。重启电脑就需要重新配置了。 想要配置后永久生效，只要添加AddKeysToAgent和UseKeychain字段，修改~/.ssh/config文件为： 1234567891011121314151617#gitlabHost gitlab HostName git.XXXX.com# ServerAliveInterval 60 AddKeysToAgent yes UseKeychain yes PreferredAuthentications publickey IdentityFile ~/.ssh/gitlab_id_rsa# ForwardAgent yes #githubHost github HostName github.com AddKeysToAgent yes UseKeychain yes PreferredAuthentications publickey IdentityFile ~/.ssh/github_id_rsa 字段说明： AddKeysToAgent yes，就是把自己的 SSH Key 添加到 ssh-agent 里面使用。 ForwardAgent yes，使用 ssh-agent 转发。 UseKeychain yes，把 SSH Key 添加到系统的钥匙链里。这样就不需要每次手工把 SSH Key 添加到 ssh-agent 里面了。 IdentityFile ~/.ssh/id_rsa，设置了密钥的位置。","categories":[],"tags":[]},{"title":"test1","slug":"test1","date":"2018-06-08T08:29:47.000Z","updated":"2018-06-13T11:14:06.074Z","comments":true,"path":"2018/06/08/test1/","link":"","permalink":"https://e3gs.github.io/2018/06/08/test1/","excerpt":"","text":"picture 123public static void main(String[] args)&#123; System.out.println(\"ok\");&#125;","categories":[],"tags":[]}]}